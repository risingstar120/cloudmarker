"""Mock cloud plugin for testing purpose."""


class MockCloud:
    """Mock cloud plugin for testing purpose."""

    def __init__(self, record_count=10, record_types=('foo', 'bar')):
        """Create an instance of mock cloud plugin.

        This plugin generates mock records. The records generated
        contains two fields:

        - ``record_num``: An incrementing record number that starts with 0.
        - ``record_type``: One of the record types specified in
          ``record_types``. This plugin cycles through the record types
          specified and selects the next record type for each new record
          generated.

        Example:

            Here is an example that shows that the records generated by
            this plugin with the default initialization parameters:

            >>> from cloudmarker.clouds import mockcloud
            >>> cloud = mockcloud.MockCloud()
            >>> for record in cloud.read():
            ...     print(record['record_num'], record['record_type'])
            ...
            0 foo
            1 bar
            2 foo
            3 bar
            4 foo
            5 bar
            6 foo
            7 bar
            8 foo
            9 bar

        Arguments:
            record_count (int): Number of mock records to generate.
            record_types (tuple): A tuple of strings that represent the
                different record types to be generated.

        """
        self._record_count = record_count
        self._record_types = record_types

    def read(self):
        """Generate a record.

        This method creates and yields mock records.

        In actual cloud implementations, this method would typically
        connect to the cloud, retrieve JSON objects using the cloud API,
        and yield those objects as :obj:`dict` objects.

        Yields:
            dict: Mock record.

        """
        # We try hard to keep the cloud plugins decoupled from plugins.
        # In general, we try hard to keep one plugin decoupled from
        # another plugin. However, there is still minimal coupling
        # between plugins that is unavoidable. For example, each store
        # type needs to know the type of record it is dealing with in
        # order to classify the record and put it in the right bucket
        # (an index, file, directory, etc.). Therefore, the cloud plugin
        # puts some additional metadata such as record_type into the
        # record that other plugins can rely on.
        n = len(self._record_types)
        for i in range(self._record_count):
            yield {
                'record_num': i,
                'record_type': self._record_types[i % n],
            }

    def done(self):
        """Perform cleanup work.

        Since this is a mock plugin, this method does nothing. However,
        a typical check plugin may or may not need to perform cleanup
        work in this method depending on its nature of work.
        """
