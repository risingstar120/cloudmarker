"""Alerter to send Slack messages for identified anomalies."""

import json
import logging

import slackclient

_log = logging.getLogger(__name__)


class SlackAlert:
    """Alert plugin to send Slack alerts."""

    def __init__(self, bot_user_token, to, text,
                 temp_file='/tmp/cloudmarker/slackalert.json'):
        """Initialize the class:`SlackAlert`.

        Arguments:
          bot_user_token (string): Token for Slack bot user.
          to (list): List of recipients (string) to send Slack alert to.
          text (string): Message body.
          temp_file (string): Name of file to be used to save interim JSON
            record which will be used to attach as report to Slack message.

        """
        self._bot_user_token = bot_user_token
        self._to = to
        self._text = text
        self._temp_file = temp_file

        self._slack_report = []

    def _post_message(self):
        """Send Slack alerts with attachment."""
        sc = slackclient.SlackClient(self._bot_user_token)

        recipients = self._to

        for recipient in recipients:
            try:
                user_id = sc.api_call('users.lookupByEmail',
                                      email=recipient)['user']['id']

                # Open direct message channel to the user.
                channel_id = sc.api_call('im.open',
                                         user=user_id)['channel']['id']

                # Clack api chat.postMessage allows the message formatting for
                # optional attachments. The fallback keyword is required
                # summary for attachment and title is shown in the message.
                # More information about attachment formatting can be found at
                # https://api.slack.com/docs/message-formatting
                sc.api_call(
                    'chat.postMessage',
                    channel=channel_id,
                    attachments=[
                        {
                            'fallback': 'Cloudmarker Alert!',
                            'color': '#36a64f',
                            'title': 'Cloudmarker Anomaly Alert'
                        },
                        {
                            'text': self._text
                        }
                    ],
                    as_user=True,
                    username='Cloudmarker',
                    unfurl_links='true',
                    unfurl_media='true',
                )
            except Exception as e:
                _log.error('Call to Slack failed; error: %s: %s',
                           type(e).__name__, e)
                return

            # Attach the anomaly report.
            with open(self._temp_file, 'r') as f:
                sc.api_call(
                    'files.upload',
                    channels=[channel_id],
                    file=f,
                    title='Anomaly Report'
                )

            _log.info('Sent slack alert to %s', recipient)

    def write(self, record):
        """Write records to in memory buffer.

        This method will collate all the records in the list self._slack_report
        only.

        Arguments:
          record (list): Records generated by Events plugin.

        """
        self._slack_report.append(record)

    def done(self):
        """Write the JSON data to a file and send alert.

        This function writes the JSON data to a file. The created JSON file
        will be used by self._post_message method to send the file as an
        attachment.

        """
        if not self._slack_report:
            return

        with open(self._temp_file, 'w') as f:
            f.write(json.dumps(self._slack_report, indent=4))

        self._post_message()
